generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          UserRole  @default(COMPANY_USER)
  isGlobalAdmin Boolean   @default(false)

  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id])

  sessions      Session[]

  createdSignupKeys SignupKey[] @relation("CreatedSignupKeys")
  usedSignupKeys     SignupKey[] @relation("UsedSignupKeys")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Company {
  id         String      @id @default(cuid())
  name       String      @unique
  users      User[]
  events     Event[]
  signupKeys SignupKey[]
  createdAt  DateTime    @default(now())
}

model SignupKey {
  id            String    @id @default(cuid())
  key           String    @unique
  expiresAt     DateTime
  used          Boolean   @default(false)

  usedById      String?
  usedBy        User?     @relation("UsedSignupKeys", fields: [usedById], references: [id])

  createdById   String
  createdBy     User      @relation("CreatedSignupKeys", fields: [createdById], references: [id])

  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])

  roleToAssign  UserRole  @default(COMPANY_USER)
  createdAt     DateTime  @default(now())
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime

  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id])
}

model SignupRequest {
  id           String   @id @default(cuid())
  companyName  String
  contactEmail String
  contactName  String
  message      String?
  status       String   @default("PENDING") // could be PENDING, APPROVED, REJECTED
  createdAt    DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  EMS_USER
  COMPANY_ADMIN
  COMPANY_USER
}